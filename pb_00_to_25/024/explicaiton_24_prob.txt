	0 | Presentation of the problem:
We know that there is 10! different positions of
digits ( with [0:9] )

10! = 3 628 800

So from all these posibilities we want to find the
1 million'th.

	1 | Simplification of the problem:
We are going to use [1:3] as our example.
	Here we have 3 digits (1,2,3)
 So there is 3! = 6 different possibilities.

the 0'th position is : 123
the 6'th position is : 321

	2 | Iteration with one more digit:
Now we will use [0:3] to see what happens:
we have 4 digits (0,1,2,3)
So there is 4! = 24 different positions!

 the 0'th position is : 0123
 the 24'th position is: 3210

But now we know that the 6'th position should be: 0321
   Decomposed as : 0   (the first digit)
               and 321 ( a group of 3 digit).
321 is a section where there is 3 digits and we just saw how a 3 digit
combinaison behave. ( on point 2| )

	3 | Finding a generalisation of the problem:
Knowing that we just need to look at the factorials of each rank:
  1! = 1
  2! = 2
  3! = 6
  4! = 24

And the index of all digits in an array:
  digitArr = [0,1,2,3,4]

	4 | Concrete example:
EXAMPLE: we will find the 17'th position:
		
		A | find the factorial < or <= to our position
   We see that 4! > 17 so we skip that.
   But 3! < 17:
        2*3! = 12 < 17
		
		B| Get the index of the first digit and
		   The next position to find after the first digit(remainder)
  So we extract the data we need:
     17 // 3! = 2 (This is the index of the first digit of the position)
 and  17 % 3! = 5 (This is the remainder that we will use to find the next digit)

 The first digit of the position 17 is: digitArr[2] = 2

		C| Remove the used digit from the array of digits
As 2 is already used;, we remove it from digitArr:
  digitArr = [0,1,3,4]

		D| Loop until there is no digit left
We restart the previous step but not with 17 but with the remainder
here remainder = 5.
			[A] step
  We find : 2! < 5 and:
    5 // 2! = 2
    5 %  2! = 1
			[B] step
Next digit = digitArr[2] = 3
remainder = 1
			[C] step
  digitArr = [0,1,4]
			
 One more Step:
   1! <= 1     (after decrement we find 0)
   1 // 1! = 1
   remainder = 0
Here is an exeption: If remainder = 0 we need to decrement the index
of the next digit by 1 .

Next digit = digitArr[0] = 0

	5| Final answer:	
And finaly we add the last digit that is alone
17'th position is : 2301

We use this principle on [0:9] where there is 10 digits, to solve this problem.
