----------------- Find the number of possible path: ---------------------------
In a square grid where we can go only right and down, 
we need to go from top-left corner to the bottom-right one.

Say that the size of the grid is N*N

We know that we will do N moves to the right 
                    and N moves down

You can visualize this with coordinate:
  we go from (0) to (N) in the grid so we do: N moves on x axis
             (0)    (N)                       N moves on y axis

With N = 20: In total we will have 20 + 20 = 40 moves

We need to count every possible disposition of 
"20 moves to right" and "20 moves down" in 40 moves

In reality if you determined the positions where you go right, 
you don't need to "find" the positions where you go down (as the are all the other ones).

So we simply need to find in how many ways can we put 20 moves in a grid of 40 disponible places.

Exemple: with N=4, (This is the exemple given in the Project Euler problem)

          we need to find in how many ways cab we put  2 moves in a grid of  4 disponible places.
     R ==> note the fact that we do a move to the right
     _ ==> note that the place is free.
       [R, R, _, _]
       [R, _, R, _]
       [R, _, _, R]   as you can see he there is 6 possibilities
       [_, R, R, _]  
       [_, R, _, R]   In fact this number can be found as a number of combinaison
       [_, _, R, R]
                               (4)
He we brute-force to calculate (2) called "2 choose 4"

In our problem, the grid is 20*20 so we just need to calculate 20 choose 40 !

-------------------------- n_choose_k( n, k ): ---------------------------
	This represent a combination, from Pascal triangle.

written as:	( n )  <--- (with one parenthesis for both lines)
			( k ) 

And we use the following formula to calculate it:
            n! /( k!(n-k)! ) 

for more information about that:
https://en.wikipedia.org/wiki/Pascal's_triangle

-------------------------- factorial(n): n! ---------------------------
	This function return the factorial of n: (written "n!")
Ex:  5! = 1 * 2 * 3 * 4 * 5
AND
Ex:  8! = 1 * 2 * 3 * 4 * 5 * 6 * 7 * 8
		=        5!         * 6 * 7 * 8
		=               7!          * 8

So : We now know: 8! = (8-1)! * 8

By extension:     n! = (n-1)! * n